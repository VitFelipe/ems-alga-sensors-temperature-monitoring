package com.algaworks.algasensors.temperature.monitoring.api.controller;

import com.algaworks.algasensors.temperature.monitoring.api.model.output.SensorMonitoringOutput;
import com.algaworks.algasensors.temperature.monitoring.domain.model.SensorId;
import com.algaworks.algasensors.temperature.monitoring.domain.model.SensorMonitoring;
import com.algaworks.algasensors.temperature.monitoring.domain.model.repository.SensorMonitoringRepository;
import io.hypersistence.tsid.TSID;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

@RestController
@RequestMapping("/sensors/{sensorId}/monitoring")
@RequiredArgsConstructor
public class SensorMonitoringController {

    private final SensorMonitoringRepository  sensorMonitoringRepository;

    @GetMapping
    public SensorMonitoringOutput search (@PathVariable TSID sensorId) {
        SensorMonitoring sensorMonitoring = findByOrDefault(sensorId);
        return toModel(sensorMonitoring);
    }




    @PutMapping("/enabled")
    public SensorMonitoringOutput update(@PathVariable TSID sensorId) {
        SensorMonitoring sensorMonitoring = findByOrDefault(sensorId);
        if(sensorMonitoring.getEnabled()) {
            throw new ResponseStatusException(HttpStatus.UNPROCESSABLE_ENTITY);
        }
        sensorMonitoring.enable();
        sensorMonitoringRepository.save(sensorMonitoring);
        return toModel(sensorMonitoring);
    }




    @DeleteMapping("/disabled")
    public SensorMonitoringOutput disable(@PathVariable TSID sensorId) {
        SensorMonitoring sensorMonitoring = findByOrDefault(sensorId);
        sensorMonitoring.disable();
        sensorMonitoringRepository.save(sensorMonitoring);
        return toModel(sensorMonitoring);
    }




    private SensorMonitoring findByOrDefault(TSID sensorId) {
        return   sensorMonitoringRepository.findById(new SensorId(sensorId))
                .orElse(SensorMonitoring.builder()
                        .id(new SensorId(sensorId))
                        .enabled(false)
                        .updatedAt(null)
                        .lastValue(null)
                        .build());


    }


    private SensorMonitoringOutput toModel(SensorMonitoring sensorMonitoring) {
        return SensorMonitoringOutput.builder()
                .id(sensorMonitoring.getId().getValue())
                .enabled(sensorMonitoring.getEnabled())
                .lastValue(sensorMonitoring.getLastValue())
                .updatedAt(sensorMonitoring.getUpdatedAt())
                .build();
    }

}
